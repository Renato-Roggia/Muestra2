// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/heist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MissionService_StartDistraction_FullMethodName = "/heist.MissionService/StartDistraction"
	MissionService_StartGolpe_FullMethodName       = "/heist.MissionService/StartGolpe"
	MissionService_CheckStatus_FullMethodName      = "/heist.MissionService/CheckStatus"
	MissionService_GetFinalLoot_FullMethodName     = "/heist.MissionService/GetFinalLoot"
	MissionService_ReceivePayment_FullMethodName   = "/heist.MissionService/ReceivePayment"
)

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionServiceClient interface {
	StartDistraction(ctx context.Context, in *DistractionRequest, opts ...grpc.CallOption) (*DistractionResponse, error)
	StartGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error)
	CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetFinalLoot(ctx context.Context, in *LootRequest, opts ...grpc.CallOption) (*LootResponse, error)
	ReceivePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) StartDistraction(ctx context.Context, in *DistractionRequest, opts ...grpc.CallOption) (*DistractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistractionResponse)
	err := c.cc.Invoke(ctx, MissionService_StartDistraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) StartGolpe(ctx context.Context, in *GolpeRequest, opts ...grpc.CallOption) (*GolpeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GolpeResponse)
	err := c.cc.Invoke(ctx, MissionService_StartGolpe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) CheckStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, MissionService_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetFinalLoot(ctx context.Context, in *LootRequest, opts ...grpc.CallOption) (*LootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LootResponse)
	err := c.cc.Invoke(ctx, MissionService_GetFinalLoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) ReceivePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, MissionService_ReceivePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility.
type MissionServiceServer interface {
	StartDistraction(context.Context, *DistractionRequest) (*DistractionResponse, error)
	StartGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error)
	CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	GetFinalLoot(context.Context, *LootRequest) (*LootResponse, error)
	ReceivePayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMissionServiceServer struct{}

func (UnimplementedMissionServiceServer) StartDistraction(context.Context, *DistractionRequest) (*DistractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDistraction not implemented")
}
func (UnimplementedMissionServiceServer) StartGolpe(context.Context, *GolpeRequest) (*GolpeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGolpe not implemented")
}
func (UnimplementedMissionServiceServer) CheckStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedMissionServiceServer) GetFinalLoot(context.Context, *LootRequest) (*LootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalLoot not implemented")
}
func (UnimplementedMissionServiceServer) ReceivePayment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePayment not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}
func (UnimplementedMissionServiceServer) testEmbeddedByValue()                        {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_StartDistraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).StartDistraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_StartDistraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).StartDistraction(ctx, req.(*DistractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_StartGolpe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GolpeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).StartGolpe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_StartGolpe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).StartGolpe(ctx, req.(*GolpeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).CheckStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetFinalLoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetFinalLoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_GetFinalLoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetFinalLoot(ctx, req.(*LootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_ReceivePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).ReceivePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_ReceivePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).ReceivePayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDistraction",
			Handler:    _MissionService_StartDistraction_Handler,
		},
		{
			MethodName: "StartGolpe",
			Handler:    _MissionService_StartGolpe_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _MissionService_CheckStatus_Handler,
		},
		{
			MethodName: "GetFinalLoot",
			Handler:    _MissionService_GetFinalLoot_Handler,
		},
		{
			MethodName: "ReceivePayment",
			Handler:    _MissionService_ReceivePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/heist.proto",
}

const (
	LesterService_GetOffer_FullMethodName        = "/heist.LesterService/GetOffer"
	LesterService_ConfirmDecision_FullMethodName = "/heist.LesterService/ConfirmDecision"
	LesterService_SendFinalReport_FullMethodName = "/heist.LesterService/SendFinalReport"
	LesterService_ReceivePayment_FullMethodName  = "/heist.LesterService/ReceivePayment"
)

// LesterServiceClient is the client API for LesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LesterServiceClient interface {
	GetOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	ConfirmDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	SendFinalReport(ctx context.Context, in *FinalReport, opts ...grpc.CallOption) (*ReportResponse, error)
	ReceivePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
}

type lesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLesterServiceClient(cc grpc.ClientConnInterface) LesterServiceClient {
	return &lesterServiceClient{cc}
}

func (c *lesterServiceClient) GetOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, LesterService_GetOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) ConfirmDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, LesterService_ConfirmDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) SendFinalReport(ctx context.Context, in *FinalReport, opts ...grpc.CallOption) (*ReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, LesterService_SendFinalReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) ReceivePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, LesterService_ReceivePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LesterServiceServer is the server API for LesterService service.
// All implementations must embed UnimplementedLesterServiceServer
// for forward compatibility.
type LesterServiceServer interface {
	GetOffer(context.Context, *OfferRequest) (*OfferResponse, error)
	ConfirmDecision(context.Context, *DecisionRequest) (*DecisionResponse, error)
	SendFinalReport(context.Context, *FinalReport) (*ReportResponse, error)
	ReceivePayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	mustEmbedUnimplementedLesterServiceServer()
}

// UnimplementedLesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLesterServiceServer struct{}

func (UnimplementedLesterServiceServer) GetOffer(context.Context, *OfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedLesterServiceServer) ConfirmDecision(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDecision not implemented")
}
func (UnimplementedLesterServiceServer) SendFinalReport(context.Context, *FinalReport) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFinalReport not implemented")
}
func (UnimplementedLesterServiceServer) ReceivePayment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePayment not implemented")
}
func (UnimplementedLesterServiceServer) mustEmbedUnimplementedLesterServiceServer() {}
func (UnimplementedLesterServiceServer) testEmbeddedByValue()                       {}

// UnsafeLesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LesterServiceServer will
// result in compilation errors.
type UnsafeLesterServiceServer interface {
	mustEmbedUnimplementedLesterServiceServer()
}

func RegisterLesterServiceServer(s grpc.ServiceRegistrar, srv LesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LesterService_ServiceDesc, srv)
}

func _LesterService_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_GetOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).GetOffer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_ConfirmDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).ConfirmDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_ConfirmDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).ConfirmDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_SendFinalReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).SendFinalReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_SendFinalReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).SendFinalReport(ctx, req.(*FinalReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_ReceivePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).ReceivePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_ReceivePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).ReceivePayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LesterService_ServiceDesc is the grpc.ServiceDesc for LesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.LesterService",
	HandlerType: (*LesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOffer",
			Handler:    _LesterService_GetOffer_Handler,
		},
		{
			MethodName: "ConfirmDecision",
			Handler:    _LesterService_ConfirmDecision_Handler,
		},
		{
			MethodName: "SendFinalReport",
			Handler:    _LesterService_SendFinalReport_Handler,
		},
		{
			MethodName: "ReceivePayment",
			Handler:    _LesterService_ReceivePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/heist.proto",
}

const (
	NotificationService_StartStarNotifications_FullMethodName = "/heist.NotificationService/StartStarNotifications"
	NotificationService_StopStarNotifications_FullMethodName  = "/heist.NotificationService/StopStarNotifications"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	StartStarNotifications(ctx context.Context, in *StarRequest, opts ...grpc.CallOption) (*StarResponse, error)
	StopStarNotifications(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) StartStarNotifications(ctx context.Context, in *StarRequest, opts ...grpc.CallOption) (*StarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StarResponse)
	err := c.cc.Invoke(ctx, NotificationService_StartStarNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) StopStarNotifications(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, NotificationService_StopStarNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	StartStarNotifications(context.Context, *StarRequest) (*StarResponse, error)
	StopStarNotifications(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) StartStarNotifications(context.Context, *StarRequest) (*StarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStarNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) StopStarNotifications(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStarNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_StartStarNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).StartStarNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_StartStarNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).StartStarNotifications(ctx, req.(*StarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_StopStarNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).StopStarNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_StopStarNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).StopStarNotifications(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartStarNotifications",
			Handler:    _NotificationService_StartStarNotifications_Handler,
		},
		{
			MethodName: "StopStarNotifications",
			Handler:    _NotificationService_StopStarNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/heist.proto",
}
